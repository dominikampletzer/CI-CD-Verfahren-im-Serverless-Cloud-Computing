AWSTemplateFormatVersion: 2010-09-09

Resources:
  S3CleanupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: MyAssumeDeploymentRoles
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/CodePipelineServiceRole-${AWS::Region}-${AWS::AccountId}

        - PolicyName: MyCleanupS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*

  S3CleanupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "MyS3CleanupLambda"
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.7
      Timeout: 100
      Role: !GetAtt S3CleanupLambdaRole.Arn
      Environment:
        Variables:
          LOGGING_LEVEL: INFO
      Code:
        ZipFile: |
          import os
          import boto3
          import logging
          import json
          import signal
          import traceback
          from botocore.vendored import requests

          logger = logging.getLogger()
          logging.basicConfig()
          LOGGING_LEVEL = os.environ['LOGGING_LEVEL']
          logger.setLevel(LOGGING_LEVEL)

          def response_mapper(content):
              return {"Key": content['Key']}

          def cleanup_bucket(event, context):
              sts_client = boto3.client('sts')
              response = sts_client.assume_role(
                  RoleArn=event['ResourceProperties']['RoleArn'],
                  RoleSessionName='CleanupChildStacks'
              )

              session = boto3.Session(
                    aws_access_key_id=response['Credentials']['AccessKeyId'],
                    aws_secret_access_key=response['Credentials']['SecretAccessKey'],
                    aws_session_token=response['Credentials']['SessionToken']
                )

              s3 = session.client('s3')
              bucket_name = event['ResourceProperties']['BucketName']
              objects = s3.list_objects(Bucket=bucket_name)['Contents']
              objects = map(response_mapper, objects)
              objects = list(objects)
              s3.delete_objects(Bucket=bucket_name,Delete={"Objects": objects})
              logger.info('successfully deleted bucket files:{}'.format(bucket_name))
              return True

          def lambda_handler(event, context):
              signal.alarm(int(context.get_remaining_time_in_millis() / 1000) - 1)
              try:
                  logger.info('event: {}'.format(json.dumps(event)))
                  if event['RequestType'] == 'Create':
                      logger.info('CREATE!')
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource creation successful!"})
                  elif event['RequestType'] == 'Update':
                      logger.info('UPDATE!')
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource update successful!"})
                  elif event['RequestType'] == 'Delete':
                      logger.info('DELETE!')
                      cleanup_bucket(event, context)
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource deletion successful!"})
                  else:
                      logger.info('FAILED!')
                      send_response(event, context, "FAILED",
                                    {"Message": "Unexpected event received from CloudFormation"})
              except:  # pylint: disable=W0702
                  logger.info('FAILED!')
                  traceback.print_exc()
                  send_response(event, context, "FAILED", {
                      "Message": "Exception during processing"})

          def send_response(event, context, response_status, response_data):
              response_body = json.dumps({
                  "Status": response_status,
                  "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event['StackId'],
                  "RequestId": event['RequestId'],
                  "LogicalResourceId": event['LogicalResourceId'],
                  "Data": response_data
              })

              headers = {
                  'content-type': '',
                  'content-length': str(len(response_body))
              }
              response = requests.put(event['ResponseURL'],
                                      data=response_body,
                                      headers=headers)
              logger.info("CloudFormation returned status code: " + response.reason)

          def timeout_handler(_signal, _frame):
              raise Exception('Time exceeded')

          signal.signal(signal.SIGALRM, timeout_handler)

Outputs:
  lambdaArn:
    Description: "ARN for CleanupS3 Lambda"
    Value: !GetAtt S3CleanupLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}:Arn"
